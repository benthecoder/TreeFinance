# coding: utf-8

"""
    Priceless Planet Data Services API

    A platform to calculate user's sustainability metrics  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ImpactMetric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trees': 'float',
        'carbon_sequestered': 'float',
        'conversion_rate': 'float',
        'conversion_rate_date': 'date'
    }

    attribute_map = {
        'trees': 'trees',
        'carbon_sequestered': 'carbonSequestered',
        'conversion_rate': 'conversionRate',
        'conversion_rate_date': 'conversionRateDate'
    }

    def __init__(self, trees=None, carbon_sequestered=None, conversion_rate=None, conversion_rate_date=None, local_vars_configuration=None):  # noqa: E501
        """ImpactMetric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._trees = None
        self._carbon_sequestered = None
        self._conversion_rate = None
        self._conversion_rate_date = None
        self.discriminator = None

        if trees is not None:
            self.trees = trees
        if carbon_sequestered is not None:
            self.carbon_sequestered = carbon_sequestered
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate
        if conversion_rate_date is not None:
            self.conversion_rate_date = conversion_rate_date

    @property
    def trees(self):
        """Gets the trees of this ImpactMetric.  # noqa: E501

        Number of trees that can be planted  # noqa: E501

        :return: The trees of this ImpactMetric.  # noqa: E501
        :rtype: float
        """
        return self._trees

    @trees.setter
    def trees(self, trees):
        """Sets the trees of this ImpactMetric.

        Number of trees that can be planted  # noqa: E501

        :param trees: The trees of this ImpactMetric.  # noqa: E501
        :type trees: float
        """

        self._trees = trees

    @property
    def carbon_sequestered(self):
        """Gets the carbon_sequestered of this ImpactMetric.  # noqa: E501

        Calculated Carbon Sequestered Score after planting trees from the donation being made  # noqa: E501

        :return: The carbon_sequestered of this ImpactMetric.  # noqa: E501
        :rtype: float
        """
        return self._carbon_sequestered

    @carbon_sequestered.setter
    def carbon_sequestered(self, carbon_sequestered):
        """Sets the carbon_sequestered of this ImpactMetric.

        Calculated Carbon Sequestered Score after planting trees from the donation being made  # noqa: E501

        :param carbon_sequestered: The carbon_sequestered of this ImpactMetric.  # noqa: E501
        :type carbon_sequestered: float
        """

        self._carbon_sequestered = carbon_sequestered

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this ImpactMetric.  # noqa: E501

        Conversion Rate at which the user's currency equivalent in USD  # noqa: E501

        :return: The conversion_rate of this ImpactMetric.  # noqa: E501
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this ImpactMetric.

        Conversion Rate at which the user's currency equivalent in USD  # noqa: E501

        :param conversion_rate: The conversion_rate of this ImpactMetric.  # noqa: E501
        :type conversion_rate: float
        """

        self._conversion_rate = conversion_rate

    @property
    def conversion_rate_date(self):
        """Gets the conversion_rate_date of this ImpactMetric.  # noqa: E501

        The date at which conversion rate was last updated  # noqa: E501

        :return: The conversion_rate_date of this ImpactMetric.  # noqa: E501
        :rtype: date
        """
        return self._conversion_rate_date

    @conversion_rate_date.setter
    def conversion_rate_date(self, conversion_rate_date):
        """Sets the conversion_rate_date of this ImpactMetric.

        The date at which conversion rate was last updated  # noqa: E501

        :param conversion_rate_date: The conversion_rate_date of this ImpactMetric.  # noqa: E501
        :type conversion_rate_date: date
        """

        self._conversion_rate_date = conversion_rate_date

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImpactMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImpactMetric):
            return True

        return self.to_dict() != other.to_dict()
