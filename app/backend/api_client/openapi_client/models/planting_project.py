# coding: utf-8

"""
    Priceless Planet Data Services API

    A platform to calculate user's sustainability metrics  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PlantingProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'country_name': 'str',
        'target': 'int',
        'trees_planted': 'int',
        'area_covered': 'float',
        'carbon_sequestered': 'int',
        'name': 'str',
        'description': 'str',
        'images': 'list[Image]'
    }

    attribute_map = {
        'id': 'id',
        'country_name': 'countryName',
        'target': 'target',
        'trees_planted': 'treesPlanted',
        'area_covered': 'areaCovered',
        'carbon_sequestered': 'carbonSequestered',
        'name': 'name',
        'description': 'description',
        'images': 'images'
    }

    def __init__(self, id=None, country_name=None, target=None, trees_planted=None, area_covered=None, carbon_sequestered=None, name=None, description=None, images=None, local_vars_configuration=None):  # noqa: E501
        """PlantingProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._country_name = None
        self._target = None
        self._trees_planted = None
        self._area_covered = None
        self._carbon_sequestered = None
        self._name = None
        self._description = None
        self._images = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if country_name is not None:
            self.country_name = country_name
        if target is not None:
            self.target = target
        if trees_planted is not None:
            self.trees_planted = trees_planted
        if area_covered is not None:
            self.area_covered = area_covered
        if carbon_sequestered is not None:
            self.carbon_sequestered = carbon_sequestered
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if images is not None:
            self.images = images

    @property
    def id(self):
        """Gets the id of this PlantingProject.  # noqa: E501

        The id of the planting project, as stored in priceless planet records.  # noqa: E501

        :return: The id of this PlantingProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlantingProject.

        The id of the planting project, as stored in priceless planet records.  # noqa: E501

        :param id: The id of this PlantingProject.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def country_name(self):
        """Gets the country_name of this PlantingProject.  # noqa: E501

        ISO 3166 country short name  # noqa: E501

        :return: The country_name of this PlantingProject.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this PlantingProject.

        ISO 3166 country short name  # noqa: E501

        :param country_name: The country_name of this PlantingProject.  # noqa: E501
        :type country_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                country_name is not None and len(country_name) > 50):
            raise ValueError("Invalid value for `country_name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                country_name is not None and len(country_name) < 3):
            raise ValueError("Invalid value for `country_name`, length must be greater than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                country_name is not None and not re.search(r'^[a-zA-Z\s\\(\\),\\.]+$', country_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `country_name`, must be a follow pattern or equal to `/^[a-zA-Z\s\\(\\),\\.]+$/`")  # noqa: E501

        self._country_name = country_name

    @property
    def target(self):
        """Gets the target of this PlantingProject.  # noqa: E501


        :return: The target of this PlantingProject.  # noqa: E501
        :rtype: int
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PlantingProject.


        :param target: The target of this PlantingProject.  # noqa: E501
        :type target: int
        """

        self._target = target

    @property
    def trees_planted(self):
        """Gets the trees_planted of this PlantingProject.  # noqa: E501


        :return: The trees_planted of this PlantingProject.  # noqa: E501
        :rtype: int
        """
        return self._trees_planted

    @trees_planted.setter
    def trees_planted(self, trees_planted):
        """Sets the trees_planted of this PlantingProject.


        :param trees_planted: The trees_planted of this PlantingProject.  # noqa: E501
        :type trees_planted: int
        """

        self._trees_planted = trees_planted

    @property
    def area_covered(self):
        """Gets the area_covered of this PlantingProject.  # noqa: E501


        :return: The area_covered of this PlantingProject.  # noqa: E501
        :rtype: float
        """
        return self._area_covered

    @area_covered.setter
    def area_covered(self, area_covered):
        """Sets the area_covered of this PlantingProject.


        :param area_covered: The area_covered of this PlantingProject.  # noqa: E501
        :type area_covered: float
        """

        self._area_covered = area_covered

    @property
    def carbon_sequestered(self):
        """Gets the carbon_sequestered of this PlantingProject.  # noqa: E501


        :return: The carbon_sequestered of this PlantingProject.  # noqa: E501
        :rtype: int
        """
        return self._carbon_sequestered

    @carbon_sequestered.setter
    def carbon_sequestered(self, carbon_sequestered):
        """Sets the carbon_sequestered of this PlantingProject.


        :param carbon_sequestered: The carbon_sequestered of this PlantingProject.  # noqa: E501
        :type carbon_sequestered: int
        """

        self._carbon_sequestered = carbon_sequestered

    @property
    def name(self):
        """Gets the name of this PlantingProject.  # noqa: E501


        :return: The name of this PlantingProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlantingProject.


        :param name: The name of this PlantingProject.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[a-zA-Z0-9\s\'’\-\.\$(),%—\/]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\s'’\-\.\$(),%—\/]+$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PlantingProject.  # noqa: E501


        :return: The description of this PlantingProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlantingProject.


        :param description: The description of this PlantingProject.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 1000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and not re.search(r'^[a-zA-Z0-9\s\'’\-\.\$£€(),]+$', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[a-zA-Z0-9\s'’\-\.\$£€(),]+$/`")  # noqa: E501

        self._description = description

    @property
    def images(self):
        """Gets the images of this PlantingProject.  # noqa: E501

        Image of planting project if exists any in priceless planet records  # noqa: E501

        :return: The images of this PlantingProject.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PlantingProject.

        Image of planting project if exists any in priceless planet records  # noqa: E501

        :param images: The images of this PlantingProject.  # noqa: E501
        :type images: list[Image]
        """
        if (self.local_vars_configuration.client_side_validation and
                images is not None and len(images) < 0):
            raise ValueError("Invalid value for `images`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._images = images

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlantingProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlantingProject):
            return True

        return self.to_dict() != other.to_dict()
